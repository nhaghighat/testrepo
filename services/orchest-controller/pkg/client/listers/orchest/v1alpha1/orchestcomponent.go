/*
Copyright 2022 The orchest Authors.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/orchest/orchest/services/orchest-controller/pkg/apis/orchest/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrchestComponentLister helps list OrchestComponents.
// All objects returned here must be treated as read-only.
type OrchestComponentLister interface {
	// List lists all OrchestComponents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OrchestComponent, err error)
	// OrchestComponents returns an object that can list and get OrchestComponents.
	OrchestComponents(namespace string) OrchestComponentNamespaceLister
	OrchestComponentListerExpansion
}

// orchestComponentLister implements the OrchestComponentLister interface.
type orchestComponentLister struct {
	indexer cache.Indexer
}

// NewOrchestComponentLister returns a new OrchestComponentLister.
func NewOrchestComponentLister(indexer cache.Indexer) OrchestComponentLister {
	return &orchestComponentLister{indexer: indexer}
}

// List lists all OrchestComponents in the indexer.
func (s *orchestComponentLister) List(selector labels.Selector) (ret []*v1alpha1.OrchestComponent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrchestComponent))
	})
	return ret, err
}

// OrchestComponents returns an object that can list and get OrchestComponents.
func (s *orchestComponentLister) OrchestComponents(namespace string) OrchestComponentNamespaceLister {
	return orchestComponentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OrchestComponentNamespaceLister helps list and get OrchestComponents.
// All objects returned here must be treated as read-only.
type OrchestComponentNamespaceLister interface {
	// List lists all OrchestComponents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OrchestComponent, err error)
	// Get retrieves the OrchestComponent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OrchestComponent, error)
	OrchestComponentNamespaceListerExpansion
}

// orchestComponentNamespaceLister implements the OrchestComponentNamespaceLister
// interface.
type orchestComponentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OrchestComponents in the indexer for a given namespace.
func (s orchestComponentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OrchestComponent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OrchestComponent))
	})
	return ret, err
}

// Get retrieves the OrchestComponent from the indexer for a given namespace and name.
func (s orchestComponentNamespaceLister) Get(name string) (*v1alpha1.OrchestComponent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("orchestcomponent"), name)
	}
	return obj.(*v1alpha1.OrchestComponent), nil
}
