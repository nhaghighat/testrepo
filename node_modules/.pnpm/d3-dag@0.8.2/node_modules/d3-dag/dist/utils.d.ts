/**
 * General utilities for use throughout the package
 *
 * @internal
 * @module
 */
/** utility type for replacing keys with new value */
export declare type Up<O, N> = Omit<O, keyof N> & N;
/** helper for verifying things aren't undefined */
export declare function def<T>(val: T | undefined): T;
/** assert something */
export declare function assert(statement: unknown): asserts statement;
/** determines if two sets intersect */
export declare function setIntersect<T>(first: Set<T>, second: Set<T>): boolean;
export interface Replacer {
    (key: string, value: unknown): unknown;
}
/** replacer for serializing possibly circular json */
export declare function getCircularReplacer(): Replacer;
/** format tag for converting inputs to json */
export declare function js(strings: TemplateStringsArray, ...values: unknown[]): string;
/** iterate over bigrams of an array */
export declare function bigrams<T>(array: readonly T[]): Generator<readonly [T, T], void>;
/** depth first search for arbitrary types */
export declare function dfs<T>(children: (node: T) => Iterable<T>, ...queue: T[]): Generator<T>;
