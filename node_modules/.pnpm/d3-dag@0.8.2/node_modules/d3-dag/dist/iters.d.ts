/**
 * A fluent iterable
 *
 * This interface provides array method access to iterables that are lazy and
 * only applied when the iterator is consumed.
 *
 * @remarks
 *
 * Since the iterable length isn't known, most negative indices will require a
 * buffer that large to account for the the unknown end of the iterable.
 */
export interface FluentIterable<T> extends Iterable<T> {
    /**
     * Concatenate several iterables together
     */
    concat(...others: Iterable<T>[]): FluentIterable<T>;
    /**
     * Return a tuple of the index paired with each element
     */
    entries(): FluentIterable<[number, T]>;
    /**
     * Return true if callback is true for ever element of the iterable
     */
    every(callback: (element: T, index: number) => boolean): boolean;
    /**
     * Return a new iterable where every value is val
     */
    fill<S>(val: S): FluentIterable<S>;
    /**
     * Return a new iterable where callback is true for the elements
     */
    filter<P extends T>(callback: (element: T, index: number) => element is P): FluentIterable<P>;
    filter(callback: (element: T, index: number) => boolean): FluentIterable<T>;
    /**
     * Return the first element that passes callback
     */
    find<P extends T>(callback: (element: T, index: number) => element is P): P | undefined;
    find(callback: (element: T, index: number) => boolean): T | undefined;
    /**
     * Return the index of the first element that passes callback
     */
    findIndex(callback: (element: T, index: number) => boolean): number;
    /**
     * Map to an interable, and flatten the result
     */
    flatMap<S>(callback: (element: T, index: number) => Iterable<S>): FluentIterable<S>;
    /**
     * Call the callback for each element in iterable
     */
    forEach(callback: (element: T, index: number) => void): void;
    /**
     * Return true if the element is in iterable after `fromIndex`
     */
    includes(query: T, fromIndex?: number): boolean;
    /**
     * Return the index of the `query` in iterable if it's after `fromIndex`
     */
    indexOf(query: T, fromIndex?: number): number;
    /**
     * Join every element with a delimiter
     */
    join(separator?: string): string;
    /**
     * Return the indices of every element
     */
    keys(): FluentIterable<number>;
    /**
     * Return the last index of `query` in iterable after `fromIndex`
     */
    lastIndexOf(query: T, fromIndex?: number): number;
    /**
     * The number of elements in the iterable
     */
    readonly length: number;
    /**
     * Map every element in the iterable using callback
     */
    map<S>(callback: (element: T, index: number) => S): FluentIterable<S>;
    /**
     * Get the last element of the iterable
     */
    pop(): T | undefined;
    /**
     * Add elements to the end of the iterable
     */
    push(...items: T[]): FluentIterable<T>;
    /**
     * Return the iterable using callback
     */
    reduce(callback: (accumulator: T, currentValue: T, index: number) => T): T;
    reduce<S>(callback: (accumulator: S, currentValue: T, index: number) => S, initialValue: S): S;
    /**
     * Reverse the iterable
     */
    reverse(): FluentIterable<T>;
    /**
     * Get the first element of the iterable
     */
    shift(): T | undefined;
    /**
     * Slice the iterable
     */
    slice(start?: number, end?: number): FluentIterable<T>;
    /**
     * Return true if any element in the iterable is true for callback
     */
    some(callback: (element: T, index: number) => boolean): boolean;
    /**
     * Sort the iterable using the optional compare function
     */
    sort(compare?: (first: T, second: T) => number): FluentIterable<T>;
    /**
     * Splice the iterable
     */
    splice(start: number, deleteCount?: number, ...items: T[]): FluentIterable<T>;
    /**
     * Add elements to the front of the iterable
     */
    unshift(...items: T[]): FluentIterable<T>;
    /**
     * Return this iterable
     */
    values(): FluentIterable<T>;
}
/**
 * Create a fluent iterable from a source iterable
 */
export declare function fluent<T>(seq?: Iterable<T>): FluentIterable<T>;
