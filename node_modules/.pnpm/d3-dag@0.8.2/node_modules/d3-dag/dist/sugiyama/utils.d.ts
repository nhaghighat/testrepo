/**
 * Utility types for sugiyama layout
 *
 * This module should only really matter for those looking to develop custom
 * {@link CoordOperator}s, {@link DecrossOperator}s, or in the rare case
 * advanced {@link SugiNodeSizeAccessors}.
 *
 * @module
 */
import { Dag, DagNode } from "../dag";
/**
 * The NodeDatum used for layered {@link SugiyamaOperator} layouts
 *
 * Nodes in the original graph have a layer and a reference to the original
 * node. "dummy nodes" have a link to the parent and child of the edge their on
 * in the original dag, as well as their actual layer. Given that duplicate
 * edges aren't allowed, this uniquely defines each dummy node.
 */
export declare type SugiData<NodeDatum = unknown, LinkDatum = unknown> = {
    layer: number;
    node: DagNode<NodeDatum, LinkDatum>;
} | {
    layer: number;
    source: DagNode<NodeDatum, LinkDatum>;
    target: DagNode<NodeDatum, LinkDatum>;
};
/**
 * A {@link DagNode} with {@link SugiData}
 *
 * This is mostly a convenience type.
 */
export declare type SugiNode<NodeDatum = unknown, LinkDatum = unknown> = DagNode<SugiData<NodeDatum, LinkDatum>, undefined>;
/** @internal get DagNode from SugiData */
export declare type SugiDataDagNode<S extends SugiData> = S extends {
    node: DagNode;
} ? S["node"] : never;
/** @internal get NodeDatum from DagNode */
export declare type NodeDatum<D extends DagNode> = D["data"];
/** @internal get LinkDatum from DagNode */
export declare type LinkDatum<D extends DagNode> = ReturnType<D["childLinks"]>[number]["data"];
/**
 * Convert a layered dag (one where each node has a non-negative integer value
 * that corresponds to its layer) into a layered set of sugi nodes, which
 * contain the wrapped nodes for real nodes, or links to the source and target
 * nodes for dummy nodes.
 *
 * @internal
 */
export declare function sugify<N, L>(dag: Dag<N, L>): SugiNode<N, L>[][];
