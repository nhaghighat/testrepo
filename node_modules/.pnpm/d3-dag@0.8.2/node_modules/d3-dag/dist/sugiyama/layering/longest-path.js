import { def } from "../../utils";
/** @internal */
function buildOperator(options) {
    function longestPathCall(dag) {
        if (options.topDown) {
            dag.depth();
        }
        else {
            dag.height();
            const maxHeight = Math.max(...dag.iroots().map((d) => def(d.value)));
            for (const node of dag) {
                node.value = maxHeight - def(node.value);
            }
        }
    }
    function topDown(val) {
        if (val === undefined) {
            return options.topDown;
        }
        else {
            return buildOperator(Object.assign(Object.assign({}, options), { topDown: val }));
        }
    }
    longestPathCall.topDown = topDown;
    return longestPathCall;
}
/**
 * Create a default {@link LongestPathOperator}, bundled as
 * {@link layeringLongestPath}.
 */
export function longestPath(...args) {
    if (args.length) {
        throw new Error(`got arguments to longestPath(${args}), but constructor takes no aruguments.`);
    }
    return buildOperator({ topDown: true });
}
