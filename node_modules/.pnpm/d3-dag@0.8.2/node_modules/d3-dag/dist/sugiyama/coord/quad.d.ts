/**
 * The {@link QuadOperator} positions nodes to minimize a quadratic
 * optimization.
 *
 * @module
 */
import { CoordOperator } from ".";
/**
 * A {@link CoordOperator} that places nodes to minimize a quadratic function
 *
 * The minimization involves minimizing the distance between {@link vertical |
 * connected nodes}, the {@link curve | curvature of edges}, and the distance
 * between {@link component | disconnected components}.
 *
 * This operators generally takes the longest of all built-in operators but
 * produces the most pleasing layout.
 *
 * Create with {@link quad}.
 *
 * <img alt="quad example" src="media://sugi-simplex-opt-quad.png" width="400">
 */
export interface QuadOperator extends CoordOperator<unknown, unknown> {
    /**
     * Set the weight for verticality. Higher weights mean connected nodes should
     * be closer together, or corollarily edges should be closer to vertical
     * lines. There are two different weights, [ *regular nodes*, *dummy nodes*
     * ], the weight for a pair of connected nodes the sum of the weight value
     * for each node depending on whether not that node is a dummy node. Setting
     * them both to positive means all lines should be roughly vertical, while
     * setting a weight to zero doesn't peanalize edges between those types of
     * nodes. (default: [1, 0])
     */
    vertical(val: readonly [number, number]): QuadOperator;
    /**
     * Get the current vertical weights. By setting the weight of dummy nodes to
     * zero, longer edges aren't penalized to be straighter than short edges.
     */
    vertical(): [number, number];
    /**
     * Set the weight for curviness. Higher weights mean an edge going through a
     * node type should be roughly straight.  There are two different weights, [
     * *regular nodes*, *dummy nodes* ], that impact the curvature through those
     * node types. Setting regular nodes to positive will create a type of flow
     * of edges going through a node, while setting dummy nodes will enforce the
     * longer edges should try to be stright. (default: [0, 1])
     */
    curve(val: readonly [number, number]): QuadOperator;
    /**
     * Get the current vertical weights. By setting the weight of non-dummy nodes
     * to zero, we only care about the curvature of edges, not lines that pass
     * through nodes.
     */
    curve(): [number, number];
    /**
     * Set the weight for how close different disconnected components should be.
     * The higher the weight, the more different components will be close to each
     * other at the expense of other objectives. This needs to be greater than
     * zero to make the objective sound when there are disconnected components,
     * but otherwise should probably be very small. (default: 1)
     */
    component(val: number): QuadOperator;
    /** Get the current component weight. */
    component(): number;
}
/**
 * Create a default {@link QuadOperator}, bundled as {@link coordQuad}.
 */
export declare function quad(...args: never[]): QuadOperator;
