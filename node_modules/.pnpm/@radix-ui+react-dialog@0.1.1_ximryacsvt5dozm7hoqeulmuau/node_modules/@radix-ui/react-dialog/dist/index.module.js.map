{"mappings":"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","sources":["./packages/react/dialog/src/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n  children?: React.ReactNode;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const { forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      <Portal>\n        <Primitive.div data-state={getState(context.open)} {...overlayProps} ref={forwardedRef} />\n      </Portal>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype RemoveScrollProps = React.ComponentProps<typeof RemoveScroll>;\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {\n  /**\n   * @see https://github.com/theKashey/react-remove-scroll#usage\n   */\n  allowPinchZoom?: RemoveScrollProps['allowPinchZoom'];\n}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const { allowPinchZoom, ...contentModalProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <Portal>\n        <RemoveScroll allowPinchZoom={allowPinchZoom}>\n          <DialogContentImpl\n            {...contentModalProps}\n            ref={composedRefs}\n            // we make sure focus isn't trapped once `DialogContent` has been closed\n            // (closed !== unmounted when animating out)\n            trapFocus={context.open}\n            disableOutsidePointerEvents\n            onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n              event.preventDefault();\n              context.triggerRef.current?.focus();\n            })}\n            onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n              const originalEvent = event.detail.originalEvent;\n              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n              // If the event is a right-click, we shouldn't close because\n              // it is effectively as if we right-clicked the `Overlay`.\n              if (isRightClick) event.preventDefault();\n            })}\n            // When focus is trapped, a `focusout` event may still happen.\n            // We make sure we don't trigger our `onDismiss` in such case.\n            onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n              event.preventDefault()\n            )}\n          />\n        </RemoveScroll>\n      </Portal>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <Portal>\n        <DialogContentImpl\n          {...props}\n          ref={forwardedRef}\n          trapFocus={false}\n          disableOutsidePointerEvents={false}\n          onCloseAutoFocus={(event) => {\n            props.onCloseAutoFocus?.(event);\n\n            if (!event.defaultPrevented) {\n              if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n              // Always prevent auto focus because we either focus manually or want user agent focus\n              event.preventDefault();\n            }\n\n            hasInteractedOutsideRef.current = false;\n          }}\n          onInteractOutside={(event) => {\n            props.onInteractOutside?.(event);\n\n            if (!event.defaultPrevented) hasInteractedOutsideRef.current = true;\n\n            // Prevent dismissing when clicking the trigger.\n            // As the trigger is already setup to close, without doing so would\n            // cause it to close and immediately open.\n            //\n            // We use `onInteractOutside` as some browsers also\n            // focus on pointer down, creating the same issue.\n            const target = event.target as HTMLElement;\n            const targetIsTrigger = context.triggerRef.current?.contains(target);\n            if (targetIsTrigger) event.preventDefault();\n          }}\n        />\n      </Portal>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const {\n      __scopeDialog,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      ...contentProps\n    } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (beacuse of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={ariaDescribedBy || context.descriptionId}\n            // If `aria-label` is set, ensure `aria-labelledby` is undefined as to avoid confusion.\n            // Otherwise fallback to an explicit `aria-labelledby` or the ID used in the\n            // `DialogTitle`\n            aria-labelledby={ariaLabel ? undefined : ariaLabelledBy || context.titleId}\n            aria-label={ariaLabel || undefined}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV === 'development' && <LabelWarning contentRef={contentRef} />}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ElementRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ElementRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = Radix.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ElementRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst LABEL_WARNING_NAME = 'DialogLabelWarning';\n\nconst [LabelWarningProvider, useLabelWarningContext] = createContext(LABEL_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype LabelWarningProps = {\n  contentRef: React.RefObject<DialogContentElement>;\n};\n\nconst LabelWarning: React.FC<LabelWarningProps> = ({ contentRef }) => {\n  const labelWarningContext = useLabelWarningContext(LABEL_WARNING_NAME);\n\n  const MESSAGE = `\\`${labelWarningContext.contentName}\\` requires a label for the component to be accessible for screen reader users.\n\nYou can label the \\`${labelWarningContext.contentName}\\` by passing a \\`${labelWarningContext.titleName}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a title by assigning it an \\`id\\` and passing the same value to the \\`aria-labelledby\\` prop in \\`${labelWarningContext.contentName}\\`. If the label is confusing or duplicative for sighted users, you can also pass a label directly by using the \\`aria-label\\` prop.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${labelWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    const hasLabel =\n      contentRef.current?.getAttribute('aria-label') ||\n      document.getElementById(contentRef.current?.getAttribute('aria-labelledby')!);\n\n    if (!hasLabel) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  LabelWarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],"names":["createDialogContext","createDialogScope","createContextScope","DialogProvider","useDialogContext","Dialog","props","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","triggerRef","React","useRef","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","$da81f3af863821fb8a193d321c41d$var$DialogProvider","scope","contentId","useId","titleId","descriptionId","onOpenToggle","useCallback","prevOpen","DialogTrigger","forwardRef","forwardedRef","triggerProps","context","composedTriggerRef","useComposedRefs","Primitive","button","_babelRuntimeHelpersEsmExtends","type","getState","ref","onClick","composeEventHandlers","DialogOverlay","forceMount","overlayProps","Presence","present","$da81f3af863821fb8a193d321c41d$var$DialogOverlayImpl","DialogOverlayImpl","Portal","div","DialogContent","contentProps","$da81f3af863821fb8a193d321c41d$var$DialogContentModal","$da81f3af863821fb8a193d321c41d$var$DialogContentNonModal","DialogContentModal","allowPinchZoom","contentModalProps","contentRef","composedRefs","useEffect","content","current","hideOthers","RemoveScroll","$da81f3af863821fb8a193d321c41d$var$DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","_context$triggerRef$c","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","onFocusOutside","DialogContentNonModal","hasInteractedOutsideRef","_props$onCloseAutoFoc","_context$triggerRef$c2","call","defaultPrevented","onInteractOutside","_props$onInteractOuts","_context$triggerRef$c3","target","contains","DialogContentImpl","ariaLabel","ariaLabelledBy","ariaDescribedBy","onOpenAutoFocus","useFocusGuards","Fragment","FocusScope","asChild","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","role","id","undefined","onDismiss","DialogTitle","titleProps","h2","DialogDescription","descriptionProps","p","DialogClose","closeProps","LabelWarningProvider","useLabelWarningContext","createContext","contentName","titleName","docsSlug","Root","Trigger","Overlay","Content","Title","Description","Close"],"version":3,"file":"index.module.js.map"}