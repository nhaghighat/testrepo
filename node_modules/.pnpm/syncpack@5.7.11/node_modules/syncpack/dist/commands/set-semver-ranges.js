"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.setSemverRangesToDisk = exports.setSemverRanges = exports.setSemverRange = void 0;
var constants_1 = require("../constants");
var get_wrappers_1 = require("./lib/get-wrappers");
var get_dependencies_1 = require("./lib/installations/get-dependencies");
var is_semver_1 = require("./lib/is-semver");
var write_if_changed_1 = require("./lib/write-if-changed");
var setSemverRange = function (range, version) {
    if (!is_semver_1.isSemver(version) || !is_semver_1.isValidSemverRange(range)) {
        return version;
    }
    var nextVersion = is_semver_1.isLooseSemver(version) ? version.replace(/\.x/g, '.0') : version;
    var from1stNumber = nextVersion.search(/[0-9]/);
    var from1stDot = nextVersion.indexOf('.');
    return range === constants_1.RANGE_LOOSE
        ? nextVersion.slice(from1stNumber, from1stDot) + ".x.x"
        : "" + range + nextVersion.slice(from1stNumber);
};
exports.setSemverRange = setSemverRange;
var setSemverRanges = function (wrapper, options) {
    var e_1, _a, e_2, _b;
    var iterator = get_dependencies_1.getDependencies([wrapper], options);
    try {
        for (var iterator_1 = __values(iterator), iterator_1_1 = iterator_1.next(); !iterator_1_1.done; iterator_1_1 = iterator_1.next()) {
            var installedPackage = iterator_1_1.value;
            if (installedPackage.name.search(new RegExp(options.filter)) !== -1) {
                try {
                    for (var _c = (e_2 = void 0, __values(installedPackage.installations)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var installation = _d.value;
                        var name = installation.name, type = installation.type, version = installation.version;
                        var dependencies = installation.source.contents[type];
                        if (dependencies) {
                            dependencies[name] = exports.setSemverRange(options.semverRange, version);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c["return"])) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (iterator_1_1 && !iterator_1_1.done && (_a = iterator_1["return"])) _a.call(iterator_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
exports.setSemverRanges = setSemverRanges;
var setSemverRangesToDisk = function (options) {
    var indent = options.indent, source = options.source;
    get_wrappers_1.getWrappers({ source: source }).forEach(function (wrapper) {
        write_if_changed_1.writeIfChanged(indent, wrapper, function () {
            exports.setSemverRanges(wrapper, options);
        });
    });
};
exports.setSemverRangesToDisk = setSemverRangesToDisk;
